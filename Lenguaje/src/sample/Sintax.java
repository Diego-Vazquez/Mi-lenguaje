
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sample;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\015\000\002\011" +
    "\003\000\002\006\004\000\002\006\003\000\002\007\003" +
    "\000\002\007\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\004\003\000\002\003" +
    "\006\000\002\003\010\000\002\003\006\000\002\003\010" +
    "\000\002\003\006\000\002\003\010\000\002\003\006\000" +
    "\002\003\010\000\002\003\010\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\010\000\002\003\010" +
    "\000\002\023\007\000\002\023\007\000\002\023\011\000" +
    "\002\014\010\000\002\014\007\000\002\020\003\000\002" +
    "\020\003\000\002\020\005\000\002\020\005\000\002\020" +
    "\005\000\002\020\005\000\002\020\007\000\002\020\005" +
    "\000\002\020\006\000\002\020\005\000\002\020\005\000" +
    "\002\020\007\000\002\020\007\000\002\020\007\000\002" +
    "\020\007\000\002\020\011\000\002\020\007\000\002\020" +
    "\010\000\002\015\006\000\002\015\007\000\002\013\011" +
    "\000\002\013\012\000\002\013\022\000\002\013\023\000" +
    "\002\017\012\000\002\017\013\000\002\022\010\000\002" +
    "\024\010\000\002\024\011\000\002\024\010\000\002\024" +
    "\011\000\002\024\011\000\002\024\012\000\002\024\011" +
    "\000\002\024\012\000\002\016\007\000\002\016\010\000" +
    "\002\010\003\000\002\010\004\000\002\012\004\000\002" +
    "\012\004\000\002\025\005\000\002\026\004\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\004\045\005\001\002\000\004\023\010\001" +
    "\002\000\014\017\uffff\021\uffff\022\uffff\023\uffff\052\uffff" +
    "\001\002\000\004\002\007\001\002\000\004\002\001\001" +
    "\002\000\004\051\011\001\002\000\004\015\012\001\002" +
    "\000\004\020\013\001\002\000\004\016\014\001\002\000" +
    "\004\022\015\001\002\000\004\023\016\001\002\000\020" +
    "\004\033\006\020\007\037\010\035\013\027\014\041\045" +
    "\005\001\002\000\022\004\033\006\020\007\037\010\035" +
    "\013\027\014\041\024\ufffd\045\005\001\002\000\006\020" +
    "\317\021\320\001\002\000\022\004\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\013\ufff6\014\ufff6\024\ufff6\045\ufff6\001\002\000" +
    "\022\004\ufff3\006\ufff3\007\ufff3\010\ufff3\013\ufff3\014\ufff3" +
    "\024\ufff3\045\ufff3\001\002\000\004\024\315\001\002\000" +
    "\022\004\ufffb\006\ufffb\007\ufffb\010\ufffb\013\ufffb\014\ufffb" +
    "\024\ufffb\045\ufffb\001\002\000\022\004\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\013\ufff4\014\ufff4\024\ufff4\045\ufff4\001\002" +
    "\000\024\004\ufff8\005\310\006\ufff8\007\ufff8\010\ufff8\013" +
    "\ufff8\014\ufff8\024\ufff8\045\ufff8\001\002\000\004\020\275" +
    "\001\002\000\022\004\ufff7\006\ufff7\007\ufff7\010\ufff7\013" +
    "\ufff7\014\ufff7\024\ufff7\045\ufff7\001\002\000\022\004\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\013\ufff5\014\ufff5\024\ufff5\045" +
    "\ufff5\001\002\000\022\004\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\013\ufffc\014\ufffc\024\ufffc\045\ufffc\001\002\000\004\021" +
    "\267\001\002\000\022\004\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\013\ufffa\014\ufffa\024\ufffa\045\ufffa\001\002\000\004\021" +
    "\220\001\002\000\006\017\120\021\121\001\002\000\004" +
    "\021\103\001\002\000\022\004\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\013\ufff9\014\ufff9\024\ufff9\045\ufff9\001\002\000\004" +
    "\021\042\001\002\000\010\035\045\036\043\045\046\001" +
    "\002\000\010\023\uffdb\025\uffdb\031\uffdb\001\002\000\006" +
    "\023\061\031\062\001\002\000\010\023\uffdc\025\uffdc\031" +
    "\uffdc\001\002\000\004\030\047\001\002\000\016\035\053" +
    "\036\052\037\051\041\050\045\054\046\055\001\002\000" +
    "\012\023\uffd8\025\uffd8\027\057\031\uffd8\001\002\000\004" +
    "\037\056\001\002\000\010\023\uffd9\025\uffd9\031\uffd9\001" +
    "\002\000\010\023\uffda\025\uffda\031\uffda\001\002\000\010" +
    "\023\uffd7\025\uffd7\031\uffd7\001\002\000\010\023\uffd5\025" +
    "\uffd5\031\uffd5\001\002\000\010\023\uffd4\025\uffd4\031\uffd4" +
    "\001\002\000\004\041\060\001\002\000\010\023\uffd6\025" +
    "\uffd6\031\uffd6\001\002\000\022\004\033\006\020\007\037" +
    "\010\035\013\027\014\041\024\100\045\005\001\002\000" +
    "\010\035\064\036\063\045\065\001\002\000\010\023\uffd2" +
    "\025\uffd2\031\uffd2\001\002\000\010\023\uffd3\025\uffd3\031" +
    "\uffd3\001\002\000\004\030\066\001\002\000\016\035\072" +
    "\036\071\037\070\041\067\045\073\046\074\001\002\000" +
    "\012\023\uffcf\025\uffcf\027\076\031\uffcf\001\002\000\004" +
    "\037\075\001\002\000\010\023\uffd0\025\uffd0\031\uffd0\001" +
    "\002\000\010\023\uffd1\025\uffd1\031\uffd1\001\002\000\010" +
    "\023\uffce\025\uffce\031\uffce\001\002\000\010\023\uffcc\025" +
    "\uffcc\031\uffcc\001\002\000\010\023\uffcb\025\uffcb\031\uffcb" +
    "\001\002\000\004\041\077\001\002\000\010\023\uffcd\025" +
    "\uffcd\031\uffcd\001\002\000\022\004\uffb9\006\uffb9\007\uffb9" +
    "\010\uffb9\013\uffb9\014\uffb9\024\uffb9\045\uffb9\001\002\000" +
    "\004\024\102\001\002\000\022\004\uffb8\006\uffb8\007\uffb8" +
    "\010\uffb8\013\uffb8\014\uffb8\024\uffb8\045\uffb8\001\002\000" +
    "\004\023\104\001\002\000\022\004\033\006\020\007\037" +
    "\010\035\013\027\014\041\024\106\045\005\001\002\000" +
    "\004\024\113\001\002\000\004\014\107\001\002\000\004" +
    "\021\110\001\002\000\010\035\045\036\043\045\046\001" +
    "\002\000\006\025\112\031\062\001\002\000\022\004\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\013\uffc4\014\uffc4\024\uffc4\045" +
    "\uffc4\001\002\000\004\014\114\001\002\000\004\021\115" +
    "\001\002\000\010\035\045\036\043\045\046\001\002\000" +
    "\006\025\117\031\062\001\002\000\022\004\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\013\uffc3\014\uffc3\024\uffc3\045\uffc3\001" +
    "\002\000\016\035\210\036\205\041\204\042\211\043\131" +
    "\046\162\001\002\000\012\011\123\047\124\050\122\051" +
    "\125\001\002\000\006\017\177\025\176\001\002\000\006" +
    "\017\171\025\170\001\002\000\006\017\160\025\157\001" +
    "\002\000\006\017\127\025\126\001\002\000\022\004\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\013\ufff2\014\ufff2\024\ufff2\045" +
    "\ufff2\001\002\000\006\041\130\043\131\001\002\000\004" +
    "\025\156\001\002\000\014\020\135\041\134\042\140\045" +
    "\137\053\136\001\002\000\004\025\133\001\002\000\022" +
    "\004\uffe2\006\uffe2\007\uffe2\010\uffe2\013\uffe2\014\uffe2\024" +
    "\uffe2\045\uffe2\001\002\000\016\022\uffad\044\uffad\052\uffad" +
    "\053\uffad\054\uffad\055\uffad\001\002\000\014\020\135\041" +
    "\134\042\140\045\137\053\136\001\002\000\014\020\135" +
    "\041\134\042\140\045\137\053\136\001\002\000\016\022" +
    "\uffab\044\uffab\052\uffab\053\uffab\054\uffab\055\uffab\001\002" +
    "\000\016\022\uffac\044\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\001\002\000\014\044\143\052\145\053\144\054\146" +
    "\055\142\001\002\000\014\020\135\041\134\042\140\045" +
    "\137\053\136\001\002\000\004\025\uffb3\001\002\000\014" +
    "\020\135\041\134\042\140\045\137\053\136\001\002\000" +
    "\014\020\135\041\134\042\140\045\137\053\136\001\002" +
    "\000\014\020\135\041\134\042\140\045\137\053\136\001" +
    "\002\000\016\022\uffaf\044\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\055\uffaf\001\002\000\016\022\uffb1\044\uffb1\052\uffb1\053" +
    "\uffb1\054\146\055\142\001\002\000\016\022\uffb0\044\uffb0" +
    "\052\uffb0\053\uffb0\054\146\055\142\001\002\000\016\022" +
    "\uffae\044\uffae\052\uffae\053\uffae\054\uffae\055\uffae\001\002" +
    "\000\016\022\uffb2\044\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\001\002\000\014\022\155\052\145\053\144\054\146" +
    "\055\142\001\002\000\016\022\uffaa\044\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\001\002\000\022\004\ufff1\006\ufff1" +
    "\007\ufff1\010\ufff1\013\ufff1\014\ufff1\024\ufff1\045\ufff1\001" +
    "\002\000\022\004\uffee\006\uffee\007\uffee\010\uffee\013\uffee" +
    "\014\uffee\024\uffee\045\uffee\001\002\000\004\046\162\001" +
    "\002\000\006\025\164\052\165\001\002\000\010\022\uffb7" +
    "\025\uffb7\052\uffb7\001\002\000\010\022\uffb6\025\uffb6\052" +
    "\uffb6\001\002\000\022\004\uffed\006\uffed\007\uffed\010\uffed" +
    "\013\uffed\014\uffed\024\uffed\045\uffed\001\002\000\006\045" +
    "\166\046\167\001\002\000\010\022\uffb5\025\uffb5\052\uffb5" +
    "\001\002\000\010\022\uffb4\025\uffb4\052\uffb4\001\002\000" +
    "\022\004\uffec\006\uffec\007\uffec\010\uffec\013\uffec\014\uffec" +
    "\024\uffec\045\uffec\001\002\000\006\035\173\036\172\001" +
    "\002\000\004\025\175\001\002\000\004\025\174\001\002" +
    "\000\022\004\uffeb\006\uffeb\007\uffeb\010\uffeb\013\uffeb\014" +
    "\uffeb\024\uffeb\045\uffeb\001\002\000\022\004\uffea\006\uffea" +
    "\007\uffea\010\uffea\013\uffea\014\uffea\024\uffea\045\uffea\001" +
    "\002\000\022\004\ufff0\006\ufff0\007\ufff0\010\ufff0\013\ufff0" +
    "\014\ufff0\024\ufff0\045\ufff0\001\002\000\006\042\201\043" +
    "\131\001\002\000\004\025\203\001\002\000\004\025\202" +
    "\001\002\000\022\004\uffef\006\uffef\007\uffef\010\uffef\013" +
    "\uffef\014\uffef\024\uffef\045\uffef\001\002\000\022\004\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\013\uffe3\014\uffe3\024\uffe3\045" +
    "\uffe3\001\002\000\004\025\217\001\002\000\004\025\216" +
    "\001\002\000\004\025\215\001\002\000\006\025\214\052" +
    "\165\001\002\000\004\025\213\001\002\000\004\025\212" +
    "\001\002\000\022\004\uffe7\006\uffe7\007\uffe7\010\uffe7\013" +
    "\uffe7\014\uffe7\024\uffe7\045\uffe7\001\002\000\022\004\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6\024\uffe6\045" +
    "\uffe6\001\002\000\022\004\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\013\uffe8\014\uffe8\024\uffe8\045\uffe8\001\002\000\022\004" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\013\uffe4\014\uffe4\024\uffe4" +
    "\045\uffe4\001\002\000\022\004\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\013\uffe5\014\uffe5\024\uffe5\045\uffe5\001\002\000\022" +
    "\004\uffe9\006\uffe9\007\uffe9\010\uffe9\013\uffe9\014\uffe9\024" +
    "\uffe9\045\uffe9\001\002\000\004\045\221\001\002\000\004" +
    "\023\222\001\002\000\004\012\223\001\002\000\006\041" +
    "\247\046\250\001\002\000\006\012\225\024\226\001\002" +
    "\000\006\041\227\046\230\001\002\000\022\004\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\013\uffc2\014\uffc2\024\uffc2\045\uffc2" +
    "\001\002\000\004\021\240\001\002\000\004\021\231\001" +
    "\002\000\004\023\232\001\002\000\022\004\033\006\020" +
    "\007\037\010\035\013\027\014\041\024\233\045\005\001" +
    "\002\000\004\025\237\001\002\000\004\024\235\001\002" +
    "\000\004\025\236\001\002\000\006\012\uffbc\024\uffbc\001" +
    "\002\000\006\012\uffbd\024\uffbd\001\002\000\004\023\241" +
    "\001\002\000\022\004\033\006\020\007\037\010\035\013" +
    "\027\014\041\024\243\045\005\001\002\000\004\024\245" +
    "\001\002\000\004\025\244\001\002\000\006\012\uffbb\024" +
    "\uffbb\001\002\000\004\025\246\001\002\000\006\012\uffba" +
    "\024\uffba\001\002\000\004\021\260\001\002\000\004\021" +
    "\251\001\002\000\004\023\252\001\002\000\022\004\033" +
    "\006\020\007\037\010\035\013\027\014\041\024\254\045" +
    "\005\001\002\000\004\024\256\001\002\000\004\025\255" +
    "\001\002\000\006\012\uffbf\024\uffbf\001\002\000\004\025" +
    "\257\001\002\000\006\012\uffbe\024\uffbe\001\002\000\004" +
    "\023\261\001\002\000\022\004\033\006\020\007\037\010" +
    "\035\013\027\014\041\024\263\045\005\001\002\000\004" +
    "\024\265\001\002\000\004\025\264\001\002\000\006\012" +
    "\uffc1\024\uffc1\001\002\000\004\025\266\001\002\000\006" +
    "\012\uffc0\024\uffc0\001\002\000\010\035\045\036\043\045" +
    "\046\001\002\000\006\023\271\031\062\001\002\000\022" +
    "\004\033\006\020\007\037\010\035\013\027\014\041\024" +
    "\272\045\005\001\002\000\024\004\uffdd\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\013\uffdd\014\uffdd\024\uffdd\045\uffdd\001" +
    "\002\000\004\024\274\001\002\000\024\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\013\uffde\014\uffde\024\uffde\045" +
    "\uffde\001\002\000\006\045\005\046\162\001\002\000\006" +
    "\022\302\052\303\001\002\000\006\022\300\052\165\001" +
    "\002\000\004\025\301\001\002\000\022\004\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\013\uffe1\014\uffe1\024\uffe1\045\uffe1\001" +
    "\002\000\004\025\307\001\002\000\004\046\162\001\002" +
    "\000\006\022\305\052\165\001\002\000\004\025\306\001" +
    "\002\000\022\004\uffdf\006\uffdf\007\uffdf\010\uffdf\013\uffdf" +
    "\014\uffdf\024\uffdf\045\uffdf\001\002\000\022\004\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\013\uffe0\014\uffe0\024\uffe0\045\uffe0" +
    "\001\002\000\004\023\311\001\002\000\022\004\033\006" +
    "\020\007\037\010\035\013\027\014\041\024\313\045\005" +
    "\001\002\000\004\024\314\001\002\000\022\004\uffca\006" +
    "\uffca\007\uffca\010\uffca\013\uffca\014\uffca\024\uffca\045\uffca" +
    "\001\002\000\022\004\uffc9\006\uffc9\007\uffc9\010\uffc9\013" +
    "\uffc9\014\uffc9\024\uffc9\045\uffc9\001\002\000\004\024\316" +
    "\001\002\000\004\002\000\001\002\000\004\045\330\001" +
    "\002\000\004\041\321\001\002\000\004\021\322\001\002" +
    "\000\004\041\323\001\002\000\004\023\324\001\002\000" +
    "\022\004\033\006\020\007\037\010\035\013\027\014\041" +
    "\024\326\045\005\001\002\000\004\024\327\001\002\000" +
    "\022\004\uffc8\006\uffc8\007\uffc8\010\uffc8\013\uffc8\014\uffc8" +
    "\024\uffc8\045\uffc8\001\002\000\022\004\uffc7\006\uffc7\007" +
    "\uffc7\010\uffc7\013\uffc7\014\uffc7\024\uffc7\045\uffc7\001\002" +
    "\000\004\021\331\001\002\000\004\051\332\001\002\000" +
    "\004\017\333\001\002\000\004\041\334\001\002\000\004" +
    "\025\335\001\002\000\004\045\336\001\002\000\004\030" +
    "\337\001\002\000\004\041\340\001\002\000\004\025\341" +
    "\001\002\000\004\033\342\001\002\000\004\022\343\001" +
    "\002\000\004\023\344\001\002\000\022\004\033\006\020" +
    "\007\037\010\035\013\027\014\041\024\345\045\005\001" +
    "\002\000\022\004\uffc6\006\uffc6\007\uffc6\010\uffc6\013\uffc6" +
    "\014\uffc6\024\uffc6\045\uffc6\001\002\000\004\024\347\001" +
    "\002\000\022\004\uffc5\006\uffc5\007\uffc5\010\uffc5\013\uffc5" +
    "\014\uffc5\024\uffc5\045\uffc5\001\002\000\004\024\ufffe\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\346\000\006\002\005\011\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\021\004\031\005\023\006\022\007\016\011\035\013" +
    "\037\014\025\015\027\016\020\017\030\022\024\023\033" +
    "\001\001\000\034\003\021\004\031\005\023\006\347\007" +
    "\016\011\035\013\037\014\025\015\027\016\020\017\030" +
    "\022\024\023\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\021\004\031\005\023\006\100\007\016\011\035\013\037" +
    "\014\025\015\027\016\020\017\030\022\024\023\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\021\004" +
    "\031\005\023\006\104\007\016\011\035\013\037\014\025" +
    "\015\027\016\020\017\030\022\024\023\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\110\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\206\025" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\131\001\001\000\002\001\001\000\004" +
    "\026\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\153\001\001\000\004\026\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\151\001\001\000\002\001\001\000\004" +
    "\026\150\001\001\000\004\026\147\001\001\000\004\026" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\160\001\001\000\004\012\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\021" +
    "\004\031\005\023\006\233\007\016\011\035\013\037\014" +
    "\025\015\027\016\020\017\030\022\024\023\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\003\021\004\031\005\023\006\241\007\016\011\035\013" +
    "\037\014\025\015\027\016\020\017\030\022\024\023\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\021\004" +
    "\031\005\023\006\252\007\016\011\035\013\037\014\025" +
    "\015\027\016\020\017\030\022\024\023\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\021\004\031\005\023\006\261\007\016\011\035\013\037" +
    "\014\025\015\027\016\020\017\030\022\024\023\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\267\001" +
    "\001\000\002\001\001\000\034\003\021\004\031\005\023" +
    "\006\272\007\016\011\035\013\037\014\025\015\027\016" +
    "\020\017\030\022\024\023\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\276\011" +
    "\275\001\001\000\002\001\001\000\004\012\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\303\001\001\000\004\012\162\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\021\004\031\005\023\006\311\007\016" +
    "\011\035\013\037\014\025\015\027\016\020\017\030\022" +
    "\024\023\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\003\021\004\031\005" +
    "\023\006\324\007\016\011\035\013\037\014\025\015\027" +
    "\016\020\017\030\022\024\023\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\003\021\004\031\005\023" +
    "\006\345\007\016\011\035\013\037\014\025\015\027\016" +
    "\020\017\030\022\024\023\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public static String codigo_error="0";
    public static String mensaje_error="";



    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
    }
    public static ArrayList<Variables>variables=new ArrayList<>();

      public int buscar_variable(String nombre){
              int posicion=0;
              for (int i = 0; i < variables.size(); i++) {
                if (variables.get(i).getNombre().equals(nombre)){
                  posicion=i;
                  break;
                }
              }
              return posicion;
        }
        public boolean existe(String nombre){
          boolean exi=false;
          for (int i = 0; i < variables.size(); i++) {
            if (variables.get(i).getNombre().equals(nombre)){
              exi=true;
              break;
            }
          }
          return exi;
        }
        public static void colector_de_basura(){
             variables.clear();
        }






/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action_part00000000(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= IDENTIFICADOR Corchete_a Int Main Parentesis_a Void Parentesis_b Corchete_a INSTRUCCIONES Corchete_b Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // IDENTIFICADOR ::= Identificador 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IDENTIFICADOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCIONES ::= INSTRUCCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= DECLARACIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= SENTENCIAS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIAS ::= PRINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIAS ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS ::= DO_WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACIONES ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACIONES",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= IDENTIFICADOR Dos_puntos Int Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
         if (existe(a.toString())){
		   //la variable no se declara si ya existe
         }else {
           variables.add(new Variables(a.toString(),"int"));
         }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= IDENTIFICADOR Dos_puntos Int Igual Numero Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
              if (existe(a.toString())){
                //la variable no se declara si ya existe
              }else {
                variables.add(new Variables(a.toString(),"int",String.valueOf(num)));
              }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= IDENTIFICADOR Dos_puntos Dobl Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
 if (existe(a.toString())){
     //la variable no se declara si ya existe
 }else {
    variables.add(new Variables(a.toString(),"dobl"));
 }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= IDENTIFICADOR Dos_puntos Dobl Igual DECIMAL Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
if (existe(a.toString())){
     //la variable no se declara si ya existe
}else {
    variables.add(new Variables(a.toString(),"dobl",b));
}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= IDENTIFICADOR Dos_puntos Str Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
if (existe(a.toString())){
     //la variable no se declara si ya existe
}else {
    variables.add(new Variables(a.toString(),"str"));
}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= IDENTIFICADOR Dos_puntos Str Igual CADENAS Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
if (existe(a.toString())){
     //la variable no se declara si ya existe
}else {
    variables.add(new Variables(a.toString(),"str",c.toString()));
}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= IDENTIFICADOR Dos_puntos Bol Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
if (existe(a.toString())){
     //la variable no se declara si ya existe
}else {
    variables.add(new Variables(a.toString(),"bol"));
}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= IDENTIFICADOR Dos_puntos Bol Igual True Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
if (existe(a.toString())){
     //la variable no se declara si ya existe
}else {
    variables.add(new Variables(a.toString(),"bol","true"));
}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= IDENTIFICADOR Dos_puntos Bol Igual False Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
if (existe(a.toString())){
     //la variable no se declara si ya existe
}else {
    variables.add(new Variables(a.toString(),"bol","false"));
}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= IDENTIFICADOR Igual Numero Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
if(existe(a.toString())){variables.get(buscar_variable(a.toString())).setValor(String.valueOf(f));}else{}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= IDENTIFICADOR Igual CADENAS Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
if(existe(a.toString())){variables.get(buscar_variable(a.toString())).setValor(c.toString());}else{}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= IDENTIFICADOR Igual DECIMAL Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
if(existe(a.toString())){variables.get(buscar_variable(a.toString())).setValor(b);}else{}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= IDENTIFICADOR Igual True Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
if(existe(a.toString())){variables.get(buscar_variable(a.toString())).setValor("true");}else{}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= IDENTIFICADOR Igual False Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
if(existe(a.toString())){variables.get(buscar_variable(a.toString())).setValor("false");}else{}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= IDENTIFICADOR Igual OPERACIONES Punto_y_coma 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
 if (existe(b.toString())){
                String condicion=variables.get(buscar_variable(b.toString())).getTipo().trim().replace(" ","");
                String dd=a.toString().trim().replace(" ","");
                switch (condicion){
                  case "int":{
                    if(dd.endsWith(".0")){
                      double conas=Double.parseDouble(dd);
                      int re= (int) conas;
                      variables.get(buscar_variable(b.toString())).setValor(re+"");
                    }else{
                      codigo_error="0i";mensaje_error="La variable: "+b.toString()+" es del tipo int y la operacion es del tipo dobl";

                    }break;}
                  case "dobl":{ variables.get(buscar_variable(b.toString())).setValor(a.toString()); break;}
                }
              }else{

              }

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= IDENTIFICADOR Dos_puntos Dobl Igual OPERACIONES Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
if (existe(a.toString())){
     //la variable no se declara si ya existe
}else {
    variables.add(new Variables(a.toString(),"dobl",b.toString()));
}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= IDENTIFICADOR Dos_puntos Int Igual OPERACIONES Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
if (existe(a.toString())){
     //la variable no se declara si ya existe
}else {
     String dd=b.toString().trim().replace(" ","");
     double conas=Double.parseDouble(dd);
     int re= (int) conas;
     variables.get(buscar_variable(a.toString())).setValor(re+"");
}

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRINT ::= Print Parentesis_a CADENAS Parentesis_b Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
String cade=a.toString(); Controller.consola_aux.setText(cade);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PRINT ::= Print Parentesis_a IDENTIFICADOR Parentesis_b Punto_y_coma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
String cade=variables.get(buscar_variable(a.toString())).getValor(); Controller.consola_aux.setText(cade);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PRINT ::= Print Parentesis_a IDENTIFICADOR Suma CADENAS Parentesis_b Punto_y_coma 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
String cade=variables.get(buscar_variable(i.toString())).getValor()+a.toString(); Controller.consola_aux.setText(cade);

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINT",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IF ::= If Dos_puntos SENTENCIA_BOOLEANA Corchete_a INSTRUCCIONES Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IF ::= If Dos_puntos SENTENCIA_BOOLEANA Corchete_a Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA_BOOLEANA ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA_BOOLEANA ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA_BOOLEANA ::= Identificador Operador_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Operador_logico True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Operador_logico False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Operador_logico Identificador Operador_relacional True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Operador_logico Identificador Operador_relacional False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Operador_logico Identificador Operador_relacional Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Operador_logico Identificador Operador_relacional Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Operador_logico Identificador Operador_relacional Numero Punto Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Operador_logico Identificador Operador_relacional Cadena 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA_BOOLEANA ::= SENTENCIA_BOOLEANA Operador_logico Identificador Operador_relacional Comillas Comillas 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF_ELSE ::= IF Else Corchete_a Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF_ELSE ::= IF Else Corchete_a INSTRUCCIONES Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR ::= For Dos_puntos Numero Dos_puntos Numero Corchete_a Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR ::= For Dos_puntos Numero Dos_puntos Numero Corchete_a INSTRUCCIONES Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= For Parentesis_a Identificador Dos_puntos Int Igual Numero Punto_y_coma Identificador Operador_relacional Numero Punto_y_coma Incremento Parentesis_b Corchete_a Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= For Parentesis_a Identificador Dos_puntos Int Igual Numero Punto_y_coma Identificador Operador_relacional Numero Punto_y_coma Incremento Parentesis_b Corchete_a INSTRUCCIONES Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DO_WHILE ::= Do Dos_puntos Corchete_a Corchete_b While Dos_puntos SENTENCIA_BOOLEANA Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DO_WHILE ::= Do Dos_puntos Corchete_a INSTRUCCIONES Corchete_b While Dos_puntos SENTENCIA_BOOLEANA Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DO_WHILE",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SWITCH ::= Switch Dos_puntos Identificador Corchete_a SENTENCIA_SWITCH Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SWITCH",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENTENCIA_SWITCH ::= Case Numero Dos_puntos Corchete_a Corchete_b Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_SWITCH ::= Case Numero Dos_puntos Corchete_a INSTRUCCIONES Corchete_b Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SENTENCIA_SWITCH ::= Case Cadena Dos_puntos Corchete_a Corchete_b Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SENTENCIA_SWITCH ::= Case Cadena Dos_puntos Corchete_a INSTRUCCIONES Corchete_b Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Cadena Dos_puntos Corchete_a Corchete_b Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Cadena Dos_puntos Corchete_a INSTRUCCIONES Corchete_b Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Numero Dos_puntos Corchete_a Corchete_b Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SENTENCIA_SWITCH ::= SENTENCIA_SWITCH Case Numero Dos_puntos Corchete_a INSTRUCCIONES Corchete_b Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_SWITCH",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // WHILE ::= While Dos_puntos SENTENCIA_BOOLEANA Corchete_a Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // WHILE ::= While Dos_puntos SENTENCIA_BOOLEANA Corchete_a INSTRUCCIONES Corchete_b 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CADENAS ::= Cadena 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
RESULT=a.replace("\"","");

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // CADENAS ::= CADENAS CADENA_COMPUESTA 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
	String a=x.toString();
	String b=c.toString();
	String cadena="";
	cadena=cadena+a+b;
	RESULT=cadena.replace("\"","");


              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENAS",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CADENA_COMPUESTA ::= Suma Identificador 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		

         if (variables.get(buscar_variable(b)).getValor().isEmpty()){
        		  RESULT="null";
         }else {
                  RESULT=variables.get(buscar_variable(b)).getValor();
         }





              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COMPUESTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CADENA_COMPUESTA ::= Suma Cadena 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=b;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CADENA_COMPUESTA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERACIONES ::= Llave_a expresion Llave_b 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT=e; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERACIONES",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresion ::= Resta expresion 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=a*-1;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresion ::= expresion Suma expresion 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=a+b;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresion ::= expresion Resta expresion 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=a-b;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= expresion Multiplicacion expresion 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=a*b;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= expresion Division expresion 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=a/b;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= Numero 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=new Double(a);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= DECIMAL 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=new Double(a);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= Identificador 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		String n=variables.get(buscar_variable(a)).getValor(); RESULT=new Double(n);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= Parentesis_a expresion Parentesis_b 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT=a;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
              return CUP$Sintax$do_action_part00000000(
                               CUP$Sintax$act_num,
                               CUP$Sintax$parser,
                               CUP$Sintax$stack,
                               CUP$Sintax$top);
    }
}

}
